AWSTemplateFormatVersion: "2010-09-09"
Description: Create email notification, whenever a user is assigned/unassiged from Amazon SageMaker Studio domain.
Parameters:
  S3Bucket:
    Type: String
    Description: "Name of S3 Bucket"
  S3KeyLambdaEventFunction:
    Type: String
    Description: "S3 Key for Lambda event function."
    Default: "code/TargetLambdaFunction.zip"

Resources:
  LambdaExecutionRoleForSES:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogsPermissions
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
              - Sid: SESPermission
                Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"
  TargetLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRoleForSES.Arn
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3KeyLambdaEventFunction
      Runtime: python3.8
      Timeout: 900

  OpsEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "EventRule"
      EventPattern: 
        source: 
          - "aws.sagemaker"
        detail-type: 
          - "AWS API Call via CloudTrail"
        detail: 
          eventSource:
            - "sagemaker.amazonaws.com"
          eventName:
            - "CreateUserProfile"
            - "DeleteUserProfile"
      Name: "SageMakerStudioEventNotification"
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt TargetLambdaFunction.Arn
          Id: Id123
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: TargetLambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "OpsEventRule"
          - "Arn"